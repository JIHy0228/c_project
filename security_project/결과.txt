plainText: Hello RSA

--------------------------------------------------------

E1. 앨리스 키를 생성합니다.

앨리스 비밀키 파일 이름: Alice_privateKey.pem
앨리스 공개키 파일 이름: Alice_publicKey.pem

앨리스 키(개인키, 공개키) 생성 완료

--------------------------------------------------------

E2. 밥 키를 생성합니다.

밥 비밀키 파일 이름: Bob_privateKey.pem
밥 공개키 파일 이름: Bob_publicKey.pem

밥 키(개인키, 공개키) 생성 완료

--------------------------------------------------------

E3. 서명 암호화를 진행합니다.

해시 함수: SHA-256
signature: v?}펷m찻퀵?9pT츷達?쉚흋?8$P♨鱇j?[셄?+왡?珽칾Br?

--------------------------------------------------------

E4. 앨리스 인증서를 생성합니다.

앨리스 인증서 파일 이름: Alice_Cert.der

앨리스 인증서 생성 완료

--------------------------------------------------------

E5. 밥 인증서를 생성합니다.

밥 인증서 파일 이름: Bob_Cert.der

밥 인증서 생성 완료

--------------------------------------------------------

E6. 메세지 + 디지털서명 + 앨리스공개키인증서 파일을 생성합니다.

파일 이름: before_aesE.txt
파일 내용: Hello RSA@@v?}펷m찻퀵?9pT츷達?쉚흋?8$P♨鱇j?[셄?+왡?珽칾Br?@@Alice_Cert.der

--------------------------------------------------------

E7. 대칭키와 초기벡터(IV)를 생성합니다.

대칭키: j콲=톱h?쾐鄒NR_>?L*CK쇋킺O)?S浹잧?
bx%곹칚(%寗g탄?슫K最儆儆儆儆儆儆儆儆儆儆儆儆}
초기벡터: ?

--------------------------------------------------------

E8. AES 암호화를 진행합니다.

AES 암호화 알고리즘: AES-128-CBC
AES암호화 전 데이터의 길이: 91
AES암호화 후 데이터의 길이: 16
파일 이름: after_aesE.txt
암호화한 파일 내용: 놹?p        ??쒹??륜X晦?H律]?|vE7愕쟯 뎊?뾖O삕6|??Z뾑Il밓訣?햊yEa본뼨n岵劤"첨퇙李Y퀋됉꾉

--------------------------------------------------------

E9. 밥 인증서에서 공개키를 추출합니다.

밥의 인증서 파일 이름: Alice_Cert.der
인증서에서 공개키 추출 완료

--------------------------------------------------------

E10. RSA 암호화를 진행합니다.

RSA 암호화 후 디지털 봉투의 길이: 64
cipherText : {?0<뢶끇?{:췠

--------------------------------------------------------

E11. 암호화된 메세지 + 디지털봉투 파일을 생성합니다.

파일 이름: from_Bob.txt
파일 내용: 놹?p ??쒹??륜X晦?H律]?|vE7愕쟯 뎊?뾖O삕6|??Z뾑Il밓訣?햊yEa본뼨n岵劤"첨퇙李Y퀋됉꾉@@{?0<뢶끇?{:췠

--------------------------------------------------------

--------------------------------------------------------

--------------------------------------------------------

D1. 파일을 암호화된 메세지, 디지털봉투 파일로 분리합니다.

cipherText: {?0<뢶끇?{:췠
암호화된 메세지: 놹?p   ??쒹??륜X晦?H律]?|vE7愕쟯 뎊?뾖O삕6|??Z뾑Il밓訣?햊yEa본뼨n岵劤"첨퇙李Y퀋됉꾉

--------------------------------------------------------

D2. RSA 복호화를 진행합니다.

복호화 하기 전 cipherText: {?0<뢶끇?{:췠
복호화로 얻은 대칭 키: j콲=톱h?쾐鄒NR_>?L*CK쇋킺O)?S浹잧?
bx%곹칚(%寗g탄?슫K最儆儆儆儆儆儆儆儆儆儆儆儆}

--------------------------------------------------------

D3. AES 복호화를 진행합니다.

복호화하기 전 메세지: 놹?p      ??쒹??륜X晦?H律]?|vE7愕쟯 뎊?뾖O삕6|??Z뾑Il밓訣?햊yEa본뼨n岵劤"첨퇙李Y퀋됉꾉

AES 복호화 알고리즘: AES-128-CBC
복호화로 얻는 파일 이름: after_aesD.txt
복호화로 얻은 파일 내용: Hello RSA@@v?}펷m찻퀵?9pT츷達?쉚흋?8$P♨鱇j?[셄?+왡?珽칾Br?@@Alice_Cert.der

--------------------------------------------------------

D4. 파일을 메세지, 디지털서명, 앨리스공개키인증서로 분리합니다.

분리할 파일 이름: after_aesD.txt
분리한 plaintext: Hello RSA
분리한 signature: v?}펷m찻퀵?9pT츷達?쉚흋?8$P♨鱇j?[셄?+왡?珽칾Br?
분리한 앨리스의 공개키 인증서: Alice_Cert.der

--------------------------------------------------------

D5. 앨리스 인증서에서 공개키를 추출합니다.

앨리스의 인증서 파일 이름: Alice_Cert.der
인증서에서 공개키 추출 완료

--------------------------------------------------------

D6. 서명용 복호화 후 메세지 다이제스트를 비교합니다.

해시함수: SHA-256

plain text: Hello RSA
signature: v?}펷m찻퀵?9pT츷達?쉚흋?8$P♨鱇j?[셄?+왡?珽칾Br?
result: 0
--------------------------------------------------------